spring.application.name=registration-manager

# PostgreSQL connection
spring.datasource.url=jdbc:postgresql://${DB_HOST}:5432/${POSTGRES_DB}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# Hibernate DDL auto (use 'validate' or 'update' or 'create-drop' as needed)
spring.jpa.hibernate.ddl-auto=update

# Show SQL
spring.jpa.show-sql=true

# If you want logging in console
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# Avoid printing passwords in logs
logging.level.org.springframework=INFO

# Server port (optional, defaults to 8080)
# server.port=8080

# SpringDoc config (optional)
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# Keycloak configuration
spring.security.oauth2.client.registration.keycloak.client-id=registration-client
spring.security.oauth2.client.registration.keycloak.client-secret=j3lDCYQ6FFwsmygJF1ggSiG9lA4YmQ7J
spring.security.oauth2.client.registration.keycloak.client-name=Keycloak
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/login/oauth2/code/keycloak
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/realms/RegistrationRealm
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/realms/RegistrationRealm
